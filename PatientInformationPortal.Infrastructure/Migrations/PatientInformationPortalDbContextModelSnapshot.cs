// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientInformationPortal.Infrastructure.Persistence;

#nullable disable

namespace PatientInformationPortal.Infrastructure.Migrations
{
    [DbContext(typeof(PatientInformationPortalDbContext))]
    partial class PatientInformationPortalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PatientInformationPortal.SharedKernel.Entities.AllergiesDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AllergiesId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AllergiesId");

                    b.HasIndex("PatientId");

                    b.ToTable("AllergiesDetails", (string)null);
                });

            modelBuilder.Entity("PatientInformationPortal.SharedKernel.Entities.Allergy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Allergies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 19, 21, 27, 17, 446, DateTimeKind.Unspecified).AddTicks(8567), new TimeSpan(0, 6, 0, 0, 0)),
                            Name = "Drugs - Penicillins"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 19, 21, 27, 17, 446, DateTimeKind.Unspecified).AddTicks(8623), new TimeSpan(0, 6, 0, 0, 0)),
                            Name = "Drugs - Others"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 19, 21, 27, 17, 446, DateTimeKind.Unspecified).AddTicks(8626), new TimeSpan(0, 6, 0, 0, 0)),
                            Name = "Animals"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 19, 21, 27, 17, 446, DateTimeKind.Unspecified).AddTicks(8628), new TimeSpan(0, 6, 0, 0, 0)),
                            Name = "Foods"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 19, 21, 27, 17, 446, DateTimeKind.Unspecified).AddTicks(8630), new TimeSpan(0, 6, 0, 0, 0)),
                            Name = "Ointments"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 19, 21, 27, 17, 446, DateTimeKind.Unspecified).AddTicks(8633), new TimeSpan(0, 6, 0, 0, 0)),
                            Name = "Plant"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 19, 21, 27, 17, 446, DateTimeKind.Unspecified).AddTicks(8634), new TimeSpan(0, 6, 0, 0, 0)),
                            Name = "Spray"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 19, 21, 27, 17, 446, DateTimeKind.Unspecified).AddTicks(8636), new TimeSpan(0, 6, 0, 0, 0)),
                            Name = "Others"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 19, 21, 27, 17, 446, DateTimeKind.Unspecified).AddTicks(8638), new TimeSpan(0, 6, 0, 0, 0)),
                            Name = "No Allergies"
                        });
                });

            modelBuilder.Entity("PatientInformationPortal.SharedKernel.Entities.Disease", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Diseases", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 19, 21, 27, 17, 447, DateTimeKind.Unspecified).AddTicks(1044), new TimeSpan(0, 6, 0, 0, 0)),
                            Name = "Asthma"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 19, 21, 27, 17, 447, DateTimeKind.Unspecified).AddTicks(1064), new TimeSpan(0, 6, 0, 0, 0)),
                            Name = "Cancer"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 19, 21, 27, 17, 447, DateTimeKind.Unspecified).AddTicks(1066), new TimeSpan(0, 6, 0, 0, 0)),
                            Name = "Disorders of ear"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 19, 21, 27, 17, 447, DateTimeKind.Unspecified).AddTicks(1068), new TimeSpan(0, 6, 0, 0, 0)),
                            Name = "Disorders of eye"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 19, 21, 27, 17, 447, DateTimeKind.Unspecified).AddTicks(1070), new TimeSpan(0, 6, 0, 0, 0)),
                            Name = "Mental Illness"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 19, 21, 27, 17, 447, DateTimeKind.Unspecified).AddTicks(1072), new TimeSpan(0, 6, 0, 0, 0)),
                            Name = "Oral Health problems"
                        });
                });

            modelBuilder.Entity("PatientInformationPortal.SharedKernel.Entities.NCDDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("NCDId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NCDId");

                    b.HasIndex("PatientId");

                    b.ToTable("NCDDetails", (string)null);
                });

            modelBuilder.Entity("PatientInformationPortal.SharedKernel.Entities.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("DiseaseId")
                        .HasColumnType("bigint");

                    b.Property<int>("Epilepsy")
                        .HasColumnType("int");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("PatientInformationPortal.SharedKernel.Entities.AllergiesDetail", b =>
                {
                    b.HasOne("PatientInformationPortal.SharedKernel.Entities.Allergy", "Allergy")
                        .WithMany("AllergiesDetails")
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PatientInformationPortal.SharedKernel.Entities.Patient", "Patient")
                        .WithMany("AllergiesDetails")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PatientInformationPortal.SharedKernel.Entities.NCDDetail", b =>
                {
                    b.HasOne("PatientInformationPortal.SharedKernel.Entities.Disease", "Disease")
                        .WithMany("NCDDetails")
                        .HasForeignKey("NCDId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PatientInformationPortal.SharedKernel.Entities.Patient", "Patient")
                        .WithMany("NCDDetails")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PatientInformationPortal.SharedKernel.Entities.Patient", b =>
                {
                    b.HasOne("PatientInformationPortal.SharedKernel.Entities.Disease", "Disease")
                        .WithMany("Patients")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Disease");
                });

            modelBuilder.Entity("PatientInformationPortal.SharedKernel.Entities.Allergy", b =>
                {
                    b.Navigation("AllergiesDetails");
                });

            modelBuilder.Entity("PatientInformationPortal.SharedKernel.Entities.Disease", b =>
                {
                    b.Navigation("NCDDetails");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("PatientInformationPortal.SharedKernel.Entities.Patient", b =>
                {
                    b.Navigation("AllergiesDetails");

                    b.Navigation("NCDDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
